@model SMS.ViewModel.CourseInfo.CourseViewModel

@{
    ViewData["Title"] = "Create";
    Layout = "_AdminLayout";

}

@*Jehetu Input Value Gulo Model er Property te pass korbo na tai, asp-for ="" er maddhome kono model er property bind kori nai,
   tai Id use kore Input Field er value gulo Js diye Dhorbo.ebong Action Method a te Pathabo.
*@

<form id="courseForm" asp-controller="" asp-action="" method="" class="bg-light p-3 mt-2">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row mt-4">
        <div class="d-flex justify-content-end me-5 mb-3">
            <input type="submit" value="Save" class="btn btn-success" id="saveButton" />
            <a class="btn btn-secondary ms-3" asp-controller="MasterService" asp-action="GetCourse">Back</a>
        </div>

        <div class="flex-Main">
            <div class="Form-Flex-Container ">


                <div class="me-3 mt-3 flex-item">
                    <label  class="control-label" style="font-size:15px">Course Name</label>
                    <input  class="form-control mt-2" id="CourseName" />
                </div>

                <div class="me-3 mt-3 flex-item">
                    <label class="control-label" style="font-size:15px">Course Code</label>
                    <input  class="form-control mt-2" id="CourseCode" />
                </div>

                <div class="me-3 mt-3 flex-item">
                    <label  class="control-label mb-2" style="font-size:15px">Department</label>

                    <select class="form-select"  id="DepartmentId">
                        <option>------- Select -------</option>
                        @foreach (var option in Model.DepartmentModel)
                        {
                            <option value="@option.Value">@option.Text</option>
                        }
                    </select>
                </div>

                <div class="me-3 mt-3 flex-item">
                    <label  class="control-label" style="font-size:15px">Credit</label>
                    <input class="form-control mt-2" id="Credit" />
                    <span  class="text-danger" style="font-size:15px"></span>
                </div>

            </div>
        </div>

        <div class="d-flex justify-content-end mt-3">
            <input type="submit" value="Add" class="btn btn-primary me-3" id="addButton" />
        </div>
    </div>

</form>


    <table id="tbl" class="table table-responsive-sm border table-bordered  ms-3" style="font-size:12px; ">
        <thead class="fw-normal">
            <tr>
                <th>
                    Course Name
                </th>

                <th>
                    Course Code
                </th>
                <th>
                    Department
                </th>
                <th>
                    Credit Hour
                </th>
            </tr>
        </thead>
        <tbody id="tableBody"></tbody>

    </table>


    @* Add Button Click kore Action method theke View Return kore Model Object er maddhome Table Data gulo show koraile 
        Page Refreash hobe..Ar Page Refreash hoile Amra session clear kore dei. Add korar por ager Data gulo clear hoye jay.
        tai Js diye Action Method Call kore Data gulo Show korate hobe.Ar Action Method obossoi Json Return korbe.
    *@






@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


<script>


    document.getElementById('addButton').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent default form submission

        var CourseName = document.getElementById('CourseName').value;
        var CourseCode = document.getElementById('CourseCode').value;
        var DepartmentId = document.getElementById('DepartmentId').value;
        var Credit = document.getElementById('Credit').value;

        var courseData = {
            CourseName: CourseName,
            CourseCode: CourseCode,
            DepartmentId: DepartmentId,
            Credit: Credit
        };

        //fetch method for POST Request
        fetch('/MasterService/GetCourseToAdd', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(courseData)
        })
        .then(x => {
            if (!x.ok) {
                throw new Error('Network response was not ok.');
            } else {
                return x.json();
            }
        })  //First Promise "then"  theke json Return koreche, seta second Promise "then" a Process korechi.
        .then(y => {
            console.log('Success:', y); 

            var tableBody = document.querySelector('#tableBody');

            // Clear the table before appending new rows (if needed)
            tableBody.innerHTML = ''; 


            // Accumulate HTML string and update once after the loop
            let rows = '';


            //Json a fieldName er first letter Small  , tai Name Gulor first letter Small e rakhte hobe.
            y.forEach(x => {
                rows += `<tr>
                    <td>${x.courseName}</td>
                    <td>${x.courseCode}</td>
                    <td>${x.departmentName}</td>
                    <td>${x.credit}</td>
                </tr>`;
            });


            // Set the innerHTML after the loop
            tableBody.innerHTML = rows;

            // Clear the input fields
            document.getElementById('CourseName').value = '';
            document.getElementById('CourseCode').value = '';
            document.getElementById('DepartmentId').value = '------- Select -------';
            document.getElementById('Credit').value = '';
        })
        .catch(error => {
            console.error('Error:', error);
        });

    });

    document.getElementById('saveButton').addEventListener('click', function (event) {
        event.preventDefault();

        fetch('/MasterService/GetSessionData', {
            method: 'GET',
        })
        .then(x => {
            if (!x.ok) {
                throw new Error('Network response was not ok.');
            } else {
                return x.json();
            }
        })
        .then(y => {
                fetch('/MasterService/CreateCourse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(y)
                })
                .then(x => {
                    if (!x.ok) {
                        throw new Error('Network response was not ok.');
                    } else {
                        return x.json();
                    }
                })
                .then(x=>{
                    window.alert("Created Successfully");
                })
                .catch(ex => {
                    console.error('Error:', ex);
                })

         })
        .catch(ex => {
            console.error('Error:', ex);
        });
    });







    //beforeunload => This event is triggered when the user initiates a reload, close, or navigate away action.
    window.addEventListener('beforeunload', function (event) {
        event.preventDefault(); 

        fetch('/MasterService/ClearSession', {
            method:'GET'
        })
        .then(x => {
            if (!x.ok) {
                throw new Error('Network response was not ok ' + x.statusText);
            }
            else{
                //return x.json();
                return x.text;
            }
        })
        .catch(err => {
            console.error('There was a problem with the fetch operation:', err.tostring());
        });
    });


    // This event is triggered whenever the visibility state of the page changes (e.g., switching to a different tab, minimizing the browser, etc.).
    // document.hidden: This property returns true if the page is hidden (i.e., the user switched to another tab, minimized the browser, or the page is otherwise not visible) 
    // and false when the page is visible again.
    document.addEventListener('visibilitychange', function () {
        if (document.hidden) {
            fetch('/MasterService/ClearSession', {
                method: 'GET'
            })
                .then(x => {
                    if (!x.ok) {
                        throw new Error('Network response was not ok ' + x.statusText);
                    }
                    else {
                        //return x.json();
                        return x.text;
                    }
                })
                .catch(err => {
                    console.error('There was a problem with the fetch operation:', err.tostring());
                });
        }
    });


</script>
